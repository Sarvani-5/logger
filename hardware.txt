Camera:
 <uses-permission android:name="android.permission.CAMERA" />
    <uses-feature android:name="android.hardware.camera" android:required="true"/>
 private val CAMERA_PERMISSION_CODE = 101
    private val CAMERA_REQUEST_CODE = 102
 captureButton.setOnClickListener {
            if (checkCameraPermission()) {
                openCamera()
            } else {
                requestCameraPermission()
            }
        }
 private fun checkCameraPermission(): Boolean {
        return ContextCompat.checkSelfPermission(
            this,
            Manifest.permission.CAMERA
        ) == PackageManager.PERMISSION_GRANTED
    }

    private fun requestCameraPermission() {
        ActivityCompat.requestPermissions(
            this,
            arrayOf(Manifest.permission.CAMERA),
            CAMERA_PERMISSION_CODE
        )
    }

    private fun openCamera() {
        val cameraIntent = Intent(MediaStore.ACTION_IMAGE_CAPTURE)
        startActivityForResult(cameraIntent, CAMERA_REQUEST_CODE)
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == CAMERA_PERMISSION_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                openCamera()
            } else {
                Toast.makeText(this, "Camera permission denied", Toast.LENGTH_SHORT).show()
            }
        }
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == CAMERA_REQUEST_CODE && resultCode == RESULT_OK) {
            val imageBitmap = data?.extras?.get("data") as Bitmap
            imageView.setImageBitmap(imageBitmap)
        }
    }


Bluetooth:

    <uses-permission android:name="android.permission.BLUETOOTH" />
    <uses-permission android:name="android.permission.BLUETOOTH_ADMIN" />
    <uses-permission android:name="android.permission.BLUETOOTH_CONNECT" />
    <uses-permission android:name="android.permission.BLUETOOTH_SCAN" />
    
private val BLUETOOTH_PERMISSION_CODE = 103
    private val BLUETOOTH_ENABLE_REQUEST_CODE = 104
  private lateinit var bluetoothButton: Button
   
  private lateinit var bluetoothButton: Button
    

setupBluetooth()
       

 override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)
        if (requestCode == CAMERA_REQUEST_CODE && resultCode == RESULT_OK) {
            val imageBitmap = data?.extras?.get("data") as Bitmap
            imageView.setImageBitmap(imageBitmap)
        } else if (requestCode == BLUETOOTH_ENABLE_REQUEST_CODE && resultCode == RESULT_OK) {
            bluetoothButton.text = "Turn OFF Bluetooth"
            Toast.makeText(this, "Bluetooth turned on", Toast.LENGTH_SHORT).show()
        }
    }

    private fun setupBluetooth() {
        val bluetoothManager = getSystemService(Context.BLUETOOTH_SERVICE) as BluetoothManager
        bluetoothAdapter = bluetoothManager.adapter
        bluetoothButton = findViewById(R.id.bluetoothButton)

        try {
            bluetoothButton.text = if (bluetoothAdapter.isEnabled) "Turn OFF Bluetooth" else "Turn ON Bluetooth"
        } catch (e: SecurityException) {
            bluetoothButton.text = "Bluetooth (Permission Required)"
        }

        bluetoothButton.setOnClickListener {
            if (bluetoothAdapter == null) {
                Toast.makeText(this, "Device doesn't support Bluetooth", Toast.LENGTH_SHORT).show()
                return@setOnClickListener
            }

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
                if (ContextCompat.checkSelfPermission(this, Manifest.permission.BLUETOOTH_CONNECT) ==
                    PackageManager.PERMISSION_GRANTED) {
                    val intent = Intent(Settings.ACTION_BLUETOOTH_SETTINGS)
                    startActivity(intent)
                    Toast.makeText(this, "Please toggle Bluetooth in settings", Toast.LENGTH_SHORT).show()
                } else {
                    ActivityCompat.requestPermissions(
                        this,
                        arrayOf(Manifest.permission.BLUETOOTH_CONNECT),
                        BLUETOOTH_PERMISSION_CODE
                    )
                }
            } else {
                try {
                    if (bluetoothAdapter.isEnabled) {
                        bluetoothAdapter.disable()
                        Toast.makeText(this, "Bluetooth turned off", Toast.LENGTH_SHORT).show()
                        bluetoothButton.text = "Turn ON Bluetooth"
                    } else {
                        val enableBtIntent = Intent(BluetoothAdapter.ACTION_REQUEST_ENABLE)
                        startActivityForResult(enableBtIntent, BLUETOOTH_ENABLE_REQUEST_CODE)
                    }
                } catch (e: SecurityException) {
                    Toast.makeText(this, "Bluetooth permission required", Toast.LENGTH_SHORT).show()
                }
            }
        }
    }

 private fun setupWifi() {
        wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
        wifiButton = findViewById(R.id.wifiButton)

        wifiButton.text = if (wifiManager.isWifiEnabled) "Turn OFF WiFi" else "Turn ON WiFi"

        wifiButton.setOnClickListener {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                val intent = Intent(Settings.ACTION_WIFI_SETTINGS)
                startActivity(intent)
                Toast.makeText(this, "Please toggle WiFi in settings", Toast.LENGTH_SHORT).show()
            } else {
                try {
                    wifiManager.isWifiEnabled = !wifiManager.isWifiEnabled
                    Toast.makeText(
                        this,
                        if (wifiManager.isWifiEnabled) "WiFi turned on" else "WiFi turned off",
                        Toast.LENGTH_SHORT
                    ).show()
                } catch (e: SecurityException) {
                    Toast.makeText(this, "Cannot toggle WiFi", Toast.LENGTH_SHORT).show()
                }
            }

            wifiButton.text = if (wifiManager.isWifiEnabled) "Turn OFF WiFi" else "Turn ON WiFi"
        }
    }




WIFI:
<uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
    <uses-permission android:name="android.permission.CHANGE_WIFI_STATE" />
    private lateinit var wifiButton: Button
    private lateinit var wifiButton: Button
        setupWifi()
private fun setupWifi() {
        wifiManager = applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
        wifiButton = findViewById(R.id.wifiButton)

        wifiButton.text = if (wifiManager.isWifiEnabled) "Turn OFF WiFi" else "Turn ON WiFi"

        wifiButton.setOnClickListener {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                val intent = Intent(Settings.ACTION_WIFI_SETTINGS)
                startActivity(intent)
                Toast.makeText(this, "Please toggle WiFi in settings", Toast.LENGTH_SHORT).show()
            } else {
                try {
                    wifiManager.isWifiEnabled = !wifiManager.isWifiEnabled
                    Toast.makeText(
                        this,
                        if (wifiManager.isWifiEnabled) "WiFi turned on" else "WiFi turned off",
                        Toast.LENGTH_SHORT
                    ).show()
                } catch (e: SecurityException) {
                    Toast.makeText(this, "Cannot toggle WiFi", Toast.LENGTH_SHORT).show()
                }
            }

            wifiButton.text = if (wifiManager.isWifiEnabled) "Turn OFF WiFi" else "Turn ON WiFi"
        }
    }

AirplaneModeChangeReceiver.kt:

package com.example.god

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.widget.Toast

class AirplaneModeChangeReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context?, intent: Intent?) {
        val isenabled=intent?.getBooleanExtra("state",false) ?:return
        if(isenabled)
            Toast.makeText(context,"Enableddd",Toast.LENGTH_LONG).show()
        else
            Toast.makeText(context,"Disableddd",Toast.LENGTH_LONG).show()
    }
}


MainActivity.kt:

private lateinit var receiver: AirplaneModeChangeReceiver

val filter = IntentFilter(Intent.ACTION_AIRPLANE_MODE_CHANGED)
        receiver=AirplaneModeChangeReceiver()
        registerReceiver(receiver,filter)




BatteryReceiver.kt:

<receiver android:name=".AirplaneModeChangeReceiver" android:exported="true">
            <intent-filter>
                <action android:name="android.intent.action.AIRPLANE_MODE_CHANGED" />
            </intent-filter>
        </receiver>

package com.example.god

import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.os.BatteryManager
import android.widget.Toast

class BatteryReceiver : BroadcastReceiver() {
    override fun onReceive(context: Context?, intent: Intent?) {
        val level = intent?.getIntExtra(BatteryManager.EXTRA_LEVEL, -1) ?: -1
        Toast.makeText(context, "Battery Level: $level%", Toast.LENGTH_LONG).show()
    }
}


MainActivity.kt:
private lateinit var batteryReceiver: BatteryReceiver

val filter = IntentFilter(Intent.ACTION_BATTERY_CHANGED)
    batteryReceiver = BatteryReceiver()
    registerReceiver(batteryReceiver, filter)


<uses-permission android:name="android.permission.INTERNET"/>
<uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

inside application tag

<meta-data
            android:name="com.google.android.gms.ads.APPLICATION_ID"
            android:value="ca-app-pub-3940256099942544~3347511713"/>

add the below in dependencies (build.gradle.kts(:app))

implementation("com.google.android.gms:play-services-ads:22.6.0")

activity_main.xml:
<?xml version="1.0" encoding="utf-8"?>
<RelativeLayout
    xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    tools:context=".MainActivity">

    <TextView
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_centerInParent="true"
        android:gravity="center"
        android:text="Admob Banner Ads Example"
        android:textAlignment="center"
        android:textColor="@color/black"
        android:textSize="20sp" />

    <com.google.android.gms.ads.AdView
        xmlns:ads="http://schemas.android.com/apk/res-auto"
        android:id="@+id/adView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_alignParentBottom="true"
        android:layout_centerHorizontal="true"
        ads:adSize="BANNER"
        ads:adUnitId="ca-app-pub-3940256099942544/6300978111" />

</RelativeLayout>



MainActivity.kt:
lateinit var adView: AdView
lateinit var adRequest: AdRequest

MobileAds.initialize(this)
adView = findViewById(R.id.adView)
adRequest = AdRequest.Builder().build()
adView.loadAd(adRequest)
