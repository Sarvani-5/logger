Location Provider:

    implementation("com.google.android.gms:play-services-location:21.3.0")
<uses-permission android:name="android.permission.ACCESS_COARSE_LOCATION"/>
    <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION"/>
    <uses-permission android:name="android.permission.INTERNET"/>
    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

private lateinit var fusedLocationClient: FusedLocationProviderClient
    private val LOCATION_PERMISSION_REQUEST_CODE = 1001
fusedLocationClient = LocationServices.getFusedLocationProviderClient(this)
private fun getCurrentLocation() {
        if (ContextCompat.checkSelfPermission(
                this,
                Manifest.permission.ACCESS_FINE_LOCATION
            ) != PackageManager.PERMISSION_GRANTED
        ) {
            ActivityCompat.requestPermissions(
                this,
                arrayOf(Manifest.permission.ACCESS_FINE_LOCATION),
                LOCATION_PERMISSION_REQUEST_CODE
            )
            return
        }

        fusedLocationClient.lastLocation
            .addOnSuccessListener { location ->
                if (location != null) {
                    // Update UI with location data
                    val lat = findViewById<EditText>(R.id.latText)
                    val lon = findViewById<EditText>(R.id.lonText)
                    lat.setText(location.latitude.toString())
                    lon.setText(location.longitude.toString())

                    Toast.makeText(this, "Location retrieved successfully", Toast.LENGTH_SHORT).show()
                } else {
                    Toast.makeText(this, "Unable to get current location", Toast.LENGTH_SHORT).show()
                }
            }
            .addOnFailureListener { e ->
                Toast.makeText(this, "Error getting location: ${e.message}", Toast.LENGTH_SHORT).show()
            }
    }

    override fun onRequestPermissionsResult(
        requestCode: Int,
        permissions: Array<out String>,
        grantResults: IntArray
    ) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults)
        if (requestCode == LOCATION_PERMISSION_REQUEST_CODE) {
            if (grantResults.isNotEmpty() && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                getCurrentLocation()
            } else {
                Toast.makeText(this, "Permission denied. Cannot get location.", Toast.LENGTH_SHORT).show()
            }
        }
    }

Map:
<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" android:maxSdkVersion="29" />
implementation ("org.osmdroid:osmdroid-android:6.1.14")
private lateinit var map: MapView
    private lateinit var geocoder: Geocoder

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        val ctx = applicationContext
        Configuration.getInstance().load(ctx, PreferenceManager.getDefaultSharedPreferences(ctx))
        setContentView(R.layout.activity_map)
        map = findViewById(R.id.map)
        map.setTileSource(TileSourceFactory.MAPNIK)
        map.setMultiTouchControls(true)
        map.controller.setZoom(14.0)
        geocoder = Geocoder(this, Locale.getDefault())
        addMarkerByLocationName("No:336,Thuttukadai vanniya konar lane,North Masi Stree,Madurai-625001", "Sakthi's House")
        addMarkerByLocationName("Thiagarajar College Of Engineering,Thiruparankundram,Madurai-625001", "Sakthi's College")
    }
    private fun addMarkerByLocationName(locationName: String, description: String) {
        try {
            val addresses = geocoder.getFromLocationName(locationName, 1)
            if (addresses != null && addresses.size > 0) {
                val address = addresses[0]
                val geoPoint = GeoPoint(address.latitude, address.longitude)
                map.controller.setCenter(geoPoint)
                val marker = Marker(map)
                marker.position = geoPoint
                marker.setAnchor(Marker.ANCHOR_CENTER, Marker.ANCHOR_BOTTOM)
                marker.title = locationName
                marker.snippet = description
                map.overlays.add(marker)
                Toast.makeText(this, "Found: $locationName", Toast.LENGTH_SHORT).show()
            } else {
                val defaultPoint = GeoPoint(40.7128, -74.0060) // NYC coordinates
                map.controller.setCenter(defaultPoint)
                val marker = Marker(map)
                marker.position = defaultPoint
                marker.title = "Default Location"
                marker.snippet = "Could not find: $locationName"
                map.overlays.add(marker)
            }
        } catch (e: IOException) {
            val defaultPoint = GeoPoint(40.7128, -74.0060)
            map.controller.setCenter(defaultPoint)
            val marker = Marker(map)
            marker.position = defaultPoint
            marker.title = "Default Location"
            map.overlays.add(marker)
        }
    }
    override fun onResume() {
        super.onResume()
        map.onResume()
    }
    override fun onPause() {
        super.onPause()
        map.onPause()
    }


<org.osmdroid.views.MapView
            android:id="@+id/map"
            android:layout_width="match_parent"
            android:layout_height="match_parent" />

